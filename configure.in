dnl Process this file with autoconf to produce a configure script.
dnl 
dnl $Id$
dnl 
dnl Written by and Copyright (C) 2001 the SourceForge
dnl IJBSWA team.  http://ijbswa.sourceforge.net
dnl
dnl Based on the Internet Junkbuster originally written
dnl by and Copyright (C) 1997 Anonymous Coders and 
dnl Junkbusters Corporation.  http://www.junkbusters.com
dnl
dnl This program is free software; you can redistribute it 
dnl and/or modify it under the terms of the GNU General
dnl Public License as published by the Free Software
dnl Foundation; either version 2 of the License, or (at
dnl your option) any later version.
dnl 
dnl This program is distributed in the hope that it will
dnl be useful, but WITHOUT ANY WARRANTY; without even the
dnl implied warranty of MERCHANTABILITY or FITNESS FOR A
dnl PARTICULAR PURPOSE.  See the GNU General Public
dnl License for more details.
dnl 
dnl The GNU General Public License should be included with
dnl this file.  If not, you can view it at
dnl http://www.gnu.org/copyleft/gpl.html
dnl or write to the Free Software Foundation, Inc., 59
dnl Temple Place - Suite 330, Boston, MA  02111-1307, USA.
dnl 
dnl $Log$
dnl Revision 1.19  2001/10/07 15:33:14  oes
dnl Removed FEATURE_DENY_GZIP
dnl Bumped up version number
dnl
dnl Revision 1.18  2001/09/13 13:10:24  steudten
dnl
dnl PreWork for Debug Interface.
dnl Add new option "--with-debug" to enable debugging (flags aso.)
dnl
dnl Revision 1.17  2001/09/12 23:44:55  david__schmidt
dnl Mac OSX (Darwin) support added.
dnl
dnl Revision 1.16  2001/09/12 22:55:45  joergs
dnl AmigaOS support added.
dnl
dnl Revision 1.15  2001/09/12 17:28:59  david__schmidt
dnl
dnl OS/2 port: update autoconf'd support for the platform.
dnl
dnl Revision 1.14  2001/07/30 22:12:11  jongfoster
dnl Fixing Solaris build (I hope) and tidying up #defines:
dnl - All feature #defines are now of the form FEATURE_xxx
dnl - Permanently turned off WIN_GUI_EDIT
dnl - Permanently turned on WEBDAV and SPLIT_PROXY_ARGS
dnl
dnl Revision 1.13  2001/07/29 17:09:17  jongfoster
dnl Major changes to build system in order to fix these bugs:
dnl - pthreads under Linux was broken - changed -lpthread to -pthread
dnl - Compiling in MinGW32 mode under CygWin now correctly detects
dnl   which shared libraries are available
dnl - Solaris support (?) (Not tested under Solaris yet)
dnl
dnl Revision 1.12  2001/07/25 19:16:27  oes
dnl Bumping version number to 2.9.8
dnl
dnl Revision 1.11  2001/07/21 18:00:07  jongfoster
dnl Bumping version number to 2.9.7
dnl
dnl Revision 1.10  2001/07/18 17:25:04  oes
dnl Fixed a typo
dnl
dnl Revision 1.9  2001/07/15 19:45:13  jongfoster
dnl Added support for linking with POSIX threads library
dnl
dnl Revision 1.8  2001/07/15 17:54:29  jongfoster
dnl Renaming #define STATIC to STATIC_PCRE
dnl Adding new #define FEATURE_PTHREAD that will be used to enable
dnl POSIX threads support.
dnl
dnl Revision 1.7  2001/07/13 13:58:05  oes
dnl    Completely reorganized the selection scheme for
dnl    pcre, pcreposix, pcrs and gnu_regex:
dnl
dnl    The presence of shared pcre, pcreposix or pcrs
dnl    libraried is now autodetected. Additionally, the
dnl    user can enforce using the built-in static variants
dnl    by specifying --disable-dynamic-(pcre|pcrs).
dnl    Care is taken to avoid that pcre is dyn, while pcreposix
dnl    is static, if both are used and that pcrs is static if
dnl    pcrs is.
dnl
dnl    The choice between pcre, gnu or no regex for actionsfile
dnl    URL matching is now via
dnl    --(enable|disable)-regex-matching[=(gnu|pcre|no)] with the
dnl    default being pcre.
dnl
dnl Revision 1.6  2001/06/29 21:56:40  oes
dnl Version -> 2.9.5
dnl
dnl Revision 1.5  2001/06/29 13:26:27  oes
dnl Introduced #define CODE_STATUS
dnl
dnl Revision 1.4  2001/05/29 09:50:24  jongfoster
dnl Unified blocklist/imagelist/permissionslist.
dnl File format is still under discussion, but the internal changes
dnl are (mostly) done.
dnl
dnl Also modified interceptor behaviour:
dnl - We now intercept all URLs beginning with one of the following
dnl   prefixes (and *only* these prefixes):
dnl     * http://i.j.b/
dnl     * http://ijbswa.sf.net/config/
dnl     * http://ijbswa.sourceforge.net/config/
dnl - New interceptors "home page" - go to http://i.j.b/ to see it.
dnl - Internal changes so that intercepted and fast redirect pages
dnl   are not replaced with an image.
dnl - Interceptors now have the option to send a binary page direct
dnl   to the client. (i.e. ijb-send-banner uses this)
dnl - Implemented show-url-info interceptor.  (Which is why I needed
dnl   the above interceptors changes - a typical URL is
dnl   "http://i.j.b/show-url-info?url=www.somesite.com/banner.gif".
dnl   The previous mechanism would not have intercepted that, and
dnl   if it had been intercepted then it then it would have replaced
dnl   it with an image.)
dnl
dnl Revision 1.3  2001/05/22 18:46:04  oes
dnl
dnl - Enabled filtering banners by size rather than URL
dnl   by adding patterns that replace all standard banner
dnl   sizes with the "Junkbuster" gif to the re_filterfile
dnl
dnl - Enabled filtering WebBugs by providing a pattern
dnl   which kills all 1x1 images
dnl
dnl - Added support for PCRE_UNGREEDY behaviour to pcrs,
dnl   which is selected by the (nonstandard and therefore
dnl   capital) letter 'U' in the option string.
dnl   It causes the quantifiers to be ungreedy by default.
dnl   Appending a ? turns back to greedy (!).
dnl
dnl - Added a new interceptor ijb-send-banner, which
dnl   sends back the "Junkbuster" gif. Without imagelist or
dnl   MSIE detection support, or if tinygif = 1, or the
dnl   URL isn't recognized as an imageurl, a lame HTML
dnl   explanation is sent instead.
dnl
dnl - Added new feature, which permits blocking remote
dnl   script redirects and firing back a local redirect
dnl   to the browser.
dnl   The feature is conditionally compiled, i.e. it
dnl   can be disabled with --disable-fast-redirects,
dnl   plus it must be activated by a "fast-redirects"
dnl   line in the config file, has its own log level
dnl   and of course wants to be displayed by show-proxy-args
dnl   Note: Boy, all the #ifdefs in 1001 locations and
dnl   all the fumbling with configure.in and acconfig.h
dnl   were *way* more work than the feature itself :-(
dnl
dnl - Because a generic redirect template was needed for
dnl   this, tinygif = 3 now uses the same.
dnl
dnl - Moved GIFs, and other static HTTP response templates
dnl   to project.h
dnl
dnl - Some minor fixes
dnl
dnl - Removed some >400 CRs again (Jon, you really worked
dnl   a lot! ;-)
dnl
dnl Revision 1.2  2001/05/20 01:21:20  jongfoster
dnl Version 2.9.4 checkin.
dnl - Merged popupfile and cookiefile, and added control over PCRS
dnl   filtering, in new "permissionsfile".
dnl - Implemented LOG_LEVEL_FATAL, so that if there is a configuration
dnl   file error you now get a message box (in the Win32 GUI) rather
dnl   than the program exiting with no explanation.
dnl - Made killpopup use the PCRS MIME-type checking and HTTP-header
dnl   skipping.
dnl - Removed tabs from "config"
dnl - Moved duplicated url parsing code in "loaders.c" to a new funcition.
dnl - Bumped up version number.
dnl
dnl Revision 1.1.1.1  2001/05/15 13:58:50  oes
dnl Initial import of version 2.9.3 source tree
dnl
dnl 


dnl =================================================================
dnl AutoConf Initialization
dnl =================================================================

AC_REVISION($Revision$)
AC_INIT(jcc.c)
AC_CONFIG_HEADER(config.h)
AC_CANONICAL_HOST


dnl =================================================================
dnl Application version number
dnl =================================================================

VERSION_MAJOR=2
VERSION_MINOR=9
VERSION_POINT=9
CODE_STATUS="\"alpha\""

dnl CODE_STATUS can be "alpha", "beta", or "stable", and will be
dnl used for CGI output

dnl =================================================================
dnl Substitute the version numbers
dnl =================================================================

AC_SUBST(VERSION_MAJOR)
AC_SUBST(VERSION_MINOR)
AC_SUBST(VERSION_POINT)

dnl
AC_DEFINE_UNQUOTED(VERSION_MAJOR,${VERSION_MAJOR})
AC_DEFINE_UNQUOTED(VERSION_MINOR,${VERSION_MINOR})
AC_DEFINE_UNQUOTED(VERSION_POINT,${VERSION_POINT})
AC_DEFINE_UNQUOTED(VERSION,"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_POINT}")
AC_DEFINE_UNQUOTED(CODE_STATUS,${CODE_STATUS})


dnl =================================================================
dnl Checks for programs needed to build.
dnl =================================================================
AC_PROG_CC
AC_PROG_CPP
dnl AC_PROG_CXX
dnl AC_PROG_INSTALL
dnl AC_PROG_LN_S
dnl AC_PROG_MAKE_SET
dnl RANLIB is for PCRE:
dnl AC_PROG_RANLIB

AC_CHECK_PROG(GDB,gdb,yes,no)

dnl =================================================================
dnl debug, gcc and gdb support 
dnl =================================================================

AC_ARG_WITH(debug,
        [  --with-debug           Enable debug mode],
        [
                if test "x$withval" != "$xno" ; then
		    if test $ac_cv_prog_cc_g = yes; then
		      if test "$GCC" = yes; then
			if test "$GDB"; then
			  CFLAGS="-ggdb"
			else
			  CFLAGS="-g"
			fi
			CFLAGS="$CFLAGS -Wshadow  -Wconversion"
		      else
			CFLAGS="-g"
		      fi
		   fi
                   CFLAGS="$CFLAGS -D_DEBUG"
                fi
        ],
	[
	    if test "$GCC" = yes; then
	      CFLAGS="-O2"
	    else
	      CFLAGS=
	    fi
	]
)

dnl =================================================================
dnl additional gcc flags
dnl =================================================================
dnl 
if test "$GCC"; then
  CFLAGS="-pipe $CFLAGS"
fi


dnl =================================================================
dnl Build type
dnl =================================================================
dnl
dnl Must do this first.
dnl
dnl Reason: This sets CFLAGS in order to switch the Cygwin compiler
dnl into Cygwin or MinGW32 modes.  Depending on the mode selected,
dnl the compiler will use completely different sets of library
dnl and include files.
dnl 
dnl =================================================================

AC_MINGW32
AC_CYGWIN

if test "$MINGW32" = "yes"; then
  target_type=mingw
else
  if test "$CYGWIN" = "yes"; then
    target_type=cygwin
  else
    target_type=unix
  fi
fi

dnl Decide what to do based on target_type
dnl Note: PTHREAD_LIB is always set, even if pthread is disabled.
dnl This is because we don't know yet whether pthread is enabled.

AC_ARG_ENABLE(mingw32,
[  --enable-mingw32        Use mingw32 for a Windows GUI],
[if test $enableval = yes; then
  target_type=mingw
fi])

if test $target_type = mingw; then
  WIN_ONLY=
  SPECIAL_CFLAGS="-mwindows -mno-cygwin"
  PTHREAD_LIB=-lpthreadGC
  echo "Using mingw32 (Win32 GUI)"
else
  WIN_ONLY=#
  if test $target_type = cygwin; then
    SPECIAL_CFLAGS="-mno-win32"
    PTHREAD_LIB=
    echo "Using Cygnus (Win32 command line)"
  else
    SPECIAL_CFLAGS=
    PTHREAD_LIB=-lpthread
  fi
fi
AC_SUBST(WIN_ONLY)


dnl Save old CFLAGS so we can restore them later, then add SPECIAL_CFLAGS
old_CFLAGS_nospecial=$CFLAGS
CFLAGS="$CFLAGS $SPECIAL_CFLAGS"

# Hack to force AutoConf to use the CFLAGS we just set
dnl Warning: This may break with a future version of Autoconf
dnl          Tested with autoconf 2.13
ac_cpp='$CPP $CPPFLAGS $SPECIAL_CFLAGS'
ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'
ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'


dnl =================================================================
dnl Thread support
dnl =================================================================

AC_CHECK_HEADER(pthread.h, [have_pthread=yes], [have_pthread=no])

AC_ARG_ENABLE(pthread,
[  --disable-pthread       Don't use POSIX threads (pthreads)],
[if test $enableval = no; then
  # Disable pthreads
  have_pthread=no
fi])

if test $have_pthread = yes; then
  PTHREAD_ONLY=
  AC_DEFINE(FEATURE_PTHREAD)
  echo Using POSIX threads
  if test "$GCC" = "yes"; then
    # Set a GCC specific switch:
    if test "$target_type" = "unix"; then
      # This compiler switch makes Linux thread-safe
      # Don't know about other OS's?  Is this switch
      # supported?
      PTHREAD_LIB=
      SPECIAL_CFLAGS="-pthread"
    fi
  fi
else
  PTHREAD_ONLY=#
  echo Using native threads
fi

AC_SUBST(PTHREAD_ONLY)


dnl =================================================================
dnl Solaris specific
dnl FIXME: Not tested on Solaris yet...
dnl =================================================================


SOCKET_LIB=

case "$host" in
*-solaris*) SOCKET_LIB="-lsocket -lnsl"
            AC_DEFINE(__EXTENSIONS__)
            if test "$GCC" = "yes"; then
              # Set a GCC specific switch:
              # This compiler switch makes Solaris thread-safe
              PTHREAD_LIB=
              SPECIAL_CFLAGS="-pthreads"
            else
              # What do we do without GCC? Guess this:
              SPECIAL_CFLAGS="-D_REENTRANT"
            fi
;;
esac

AC_SUBST(SOCKET_LIB)

dnl =================================================================
dnl OS/2 specific
dnl =================================================================

case "$host" in
*-os2-emx*) SOCKET_LIB=-lsocket
;;
esac

AC_SUBST(SOCKET_LIB)

dnl =================================================================
dnl AmigaOS specific
dnl =================================================================

AMIGAOS_ONLY=#

case "$host" in
*-amigaos) AMIGAOS_ONLY=
;;
esac

AC_SUBST(AMIGAOS_ONLY)

dnl =================================================================
dnl Check for standard compiler stuff
dnl =================================================================

AC_EXEEXT
AC_OBJEXT
AC_HEADER_STDC
AC_C_CONST
AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(char *)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(size_t)

dnl Checks for header files.
dnl AC_HEADER_SYS_WAIT
dnl AC_CHECK_HEADERS(fcntl.h limits.h malloc.h sys/time.h unistd.h)

dnl Checks for library functions.
dnl AC_TYPE_SIGNAL
dnl AC_CHECK_FUNC(strstr)
dnl bcopy and memmove are for PCRE
AC_CHECK_FUNCS(strerror bcopy memmove)


dnl =================================================================
dnl Checks for libraries.
dnl =================================================================
dnl Note: Some systems may have the library but not the system header
dnl       file, so we must check for both.
AC_CHECK_LIB(pcre, pcre_compile, [AC_CHECK_HEADER(pcre.h, [have_pcre=yes], [have_pcre=no])], [have_pcre=no])
AC_CHECK_LIB(pcreposix, regcomp, [AC_CHECK_HEADER(pcreposix.h, [have_pcreposix=yes], [have_pcreposix=no])], [have_pcreposix=no], -lpcre)
AC_CHECK_LIB(pcrs, pcrs_compile, [AC_CHECK_HEADER(pcrs.h, [have_pcrs=yes], [have_pcrs=no])], [have_pcrs=no])


dnl =================================================================
dnl Always defined
dnl =================================================================

AC_DEFINE(__MT__)

dnl =================================================================
dnl Features
dnl =================================================================

AC_ARG_ENABLE(toggle,
[  --disable-toggle        Don't support temporary disable],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_TOGGLE)
fi],AC_DEFINE(FEATURE_TOGGLE))

AC_ARG_ENABLE(force,
[  --disable-force         Don't allow blockfile to be bypassed],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_FORCE_LOAD)
fi],AC_DEFINE(FEATURE_FORCE_LOAD))

AC_ARG_ENABLE(fast-redirects,
[  --disable-fast-redirects Don't support fast redirects],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_FAST_REDIRECTS)
fi], AC_DEFINE(FEATURE_FAST_REDIRECTS))

AC_ARG_ENABLE(killpopup,
[  --disable-killpopup     Never block popups],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_KILL_POPUPS)
fi],AC_DEFINE(FEATURE_KILL_POPUPS))

AC_ARG_ENABLE(stats,
[  --disable-stats         Don't keep statistics],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_STATISTICS)
fi],AC_DEFINE(FEATURE_STATISTICS))

AC_ARG_ENABLE(ie-images,
[  --disable-ie-images     Don't auto-detect whether a request from MS Internet
                          Explorer is for an image or HTML.],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_IMAGE_DETECT_MSIE)
fi],
AC_DEFINE(FEATURE_IMAGE_DETECT_MSIE))

AC_ARG_ENABLE(image-blocking,
[  --disable-image-blocking  Don't try to figure out whether a request is 
                            for an image or HTML - assume HTML.],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_IMAGE_BLOCKING)
fi],
AC_DEFINE(FEATURE_IMAGE_BLOCKING))

AC_ARG_ENABLE(acl-files,
[  --disable-acl-files     Prevents the use of ACL files to control access to
                          the proxy by IP address.],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_ACL)
fi],
AC_DEFINE(FEATURE_ACL))

AC_ARG_ENABLE(trust-files,
[  --disable-trust-files   Prevents the use of trust files.],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_TRUST)
fi],
AC_DEFINE(FEATURE_TRUST))

AC_ARG_ENABLE(jar-files,
[  --disable-jar-files     Prevents the use of jar files to capture cookies.],
[if test $enableval = yes; then
  AC_DEFINE(FEATURE_COOKIE_JAR)
fi],
AC_DEFINE(FEATURE_COOKIE_JAR))

dnl pcre/pcrs is needed for CGI anyway, so
dnl the choice is only between static and
dnl dynamic:

AC_ARG_ENABLE(regex-matching,
[  --enable-regex-matching=pcre     Use perl-compatible regex for actionsfile
                                   pattern matching (default)
  --enable-regex-matching=gnu      Use gnu style regex for actionsfile pattern
                                   matching (-> bigger binary)
  --disable-regex-matching         Don't use regex matching, compare URL
                                   prefix instead (won't shrink birary)],
[ regex_matching=$enableval ],
[ regex_matching=pcre ])

AC_ARG_ENABLE(dynamic-pcre,
[  --disable-dynamic-pcre           Use the built-in, static pcre, even if
                                   libpcre is available],
[ if test $enableval = "no"; then have_pcre=no; fi ])

AC_ARG_ENABLE(dynamic-pcrs,
[  --disable-dynamic-pcrs           Use the built-in, static pcrs, even if
                                   libpcrs is available],
[ if test $enableval = "no"; then have_pcrs=no; fi ])


# Is the regex URL matching based on libpcreposix, but we
# don't have that library?
#
if test $have_pcreposix = "yes" -o $regex_matching != "pcre"; then
  dont_miss_pcreposix=yes
else
  dont_miss_pcreposix=no
fi

# If we have libpcre and either we also have pcreposix or
# we don't need pcreposix, then link pcre dynamically; else
# build it and link statically
#
if test $have_pcre = "yes" -a $dont_miss_pcreposix = "yes"; then
  echo "using libpcre"
  pcre_dyn=yes
  STATIC_PCRE_ONLY=#
  LIBS="$LIBS -lpcre"
else
  echo "using built-in static pcre"
  pcre_dyn=no
  AC_DEFINE(STATIC_PCRE)
  STATIC_PCRE_ONLY=
fi

# If we have libpcrs and pcre is linked dynamically
# then also link pcrs dynamically, else build and link
# pcrs statically
#
if test $have_pcrs = "yes" -a $pcre_dyn = "yes"; then
  echo "using libpcrs"
  STATIC_PCRS_ONLY=#
  LIBS="$LIBS -lpcrs"
else
  echo "using built-in static pcrs"
  AC_DEFINE(STATIC_PCRS)
  STATIC_PCRS_ONLY=
fi

# Which method should be used for URL matching?
# pcre, gnu regex or prefix matching?
#
if test $regex_matching = "gnu"; then
  echo "using gnu regex for URL matching"
  AC_DEFINE(REGEX_GNU)
  GNU_REGEX_ONLY=
  PCRE_REGEX_ONLY=#
elif test $regex_matching = "pcre"; then
  echo "using pcre regex for URL matching"
  AC_DEFINE(REGEX_PCRE)
  GNU_REGEX_ONLY=#
  PCRE_REGEX_ONLY=
  if test $pcre_dyn = "yes"; then
    LIBS="$LIBS -lpcreposix"
  fi
else
  echo -e "using prefix matching for URLs\nHint: This does NOT make the executable any smaller!"
  GNU_REGEX_ONLY=#
  PCRE_REGEX_ONLY=#
fi

AC_SUBST(GNU_REGEX_ONLY)
AC_SUBST(PCRE_REGEX_ONLY)
AC_SUBST(STATIC_PCRE_ONLY)
AC_SUBST(STATIC_PCRS_ONLY)

dnl =================================================================
dnl Final cleanup and output
dnl =================================================================

dnl Remove the SPECIAL_CFLAGS stuff from CFLAGS, and add it seperately
dnl in the Makefile
CFLAGS=$old_CFLAGS_nospecial
AC_SUBST(SPECIAL_CFLAGS)

AC_SUBST(PTHREAD_LIB)

AC_OUTPUT(Makefile)
